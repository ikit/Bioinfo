configfile : "config.yml"
workdir: config["workdir"]






# ----------------------------------------------------
# Common
# ----------------------------------------------------


rule unzip:
    input:
        "{filename}.gz"
    output:
        "{filename}"
    shell:
        "gzip -d {input}"


# rule bgzip:
#     input:
#         "{filename}.vcf"
#     output:
#         "{filename}.vcf.gz"
#     shell:
#         "bgzip {input}"


rule fq_to_fastq:
    input:
        "{filename}.fq"
    output:
        "{filename}.fastq"
    shell:
        "mv {input} {output}"

# ----------------------------------------------------
# Alignment
# ----------------------------------------------------


rule qcreport:
    input: 
        "{filename}.fastq.gz"
    output:
        "html/{filename}_fastqc.html"
    log:
        "html/{filename}.report.log"
    shell:
        "mkdir -p html;"
        "fastqc {input} -o html 2>&1 > {log}"




#TODO : il faut gérer plus proprement les header du sam généré,
#       gatk est très fragile avec ça. ID doit être égale à bwa, tous doivent être renseignés
rule alignment:
    input:
        fwd = "{sample}_R1.fastq",
        rev = "{sample}_R2.fastq"
    output:
        "{sample}.sam"
    threads:128 
    log:
        "{sample}.bwa.log"
    shell:
        "bwa mem -R '@RG\tID:bwa\tSM:{wildcards.sample}\tLB:library1\tPL:ILLUMINA' -t {threads} {config[ref]} {input.fwd} {input.rev} > {output}  2> {log}"



rule sorting_sam:
    input:
        "{sample}.sam"
    output:
        "{sample}.sorted.sam"
    threads:
        128
    log:
        "{sample}.sorted.log"
    shell:
        #"picard-tools SortSam INPUT={input} OUTPUT={output} SORT_ORDER=coordinate 2> {log}"
        "samtools sort {input} --threads {threads} -o {output}"


rule mark_duplicate:
  input:
      "{sample}.sorted.sam"
  output:
      "{sample}.markDuplicate.sam",
      "{sample}.markDuplicate.metrics"
  log:
      "{sample}.markDuplicate.log"
  shell:
      "picard-tools MarkDuplicatesWithMateCigar INPUT={input} OUTPUT={output[0]} M={output[1]} 2> {log}"


rule sam_to_bam:
    input:
        "{filename}.sam"
    output:
        bam = "{filename}.bam"
    shell:
        "samtools view  -Sbh {input} > {output.bam}"


rule index_bam:
    message: 
        "Create index for bam.\n"
        "   inputs  : {input}\n"
        "   outputs : {output}"
    input:
        "{filename}.bam"
    output:
        "{filename}.bam.bai"
    shell:
        "samtools index {input} {output}"



# TODO : add 1000G, dbSNP, ...
rule bam_RealignerTargetCreator:
    input:
        "{sample}.sorted.bam",
        "{sample}.sorted.bam.bai"
    output:
        "{sample}.indel.intervals"
    threads:
        128
    shell:
        "gatk -Xms20G -Xmx20G -T RealignerTargetCreator -R -nt {threads} {config[ref]} -I {input[0]} -o {output}"


# TODO : add 1000G, dbSNP, ...
rule bam_IndelRealigner:
    input:
        bam = "{sample}.sorted.bam",
        bai = "{sample}.sorted.bam.bai",
        itv = "{sample}.indel.intervals"
    output:
        "{sample}.realigned.bam"
    shell:
        "gatk -Xms20G -Xmx20G -T IndelRealigner -R {config[ref]} -I {input.bam} -targetIntervals {input.itv} -o {output}"


rule bam_BaseRecalibrator:
    input:
        "{filename}.bam"
    output:
        "{filename}.table"
    threads:
        128
    shell:
        "gatk -Xms20G -Xmx20G -T BaseRecalibrator -R {config[ref]} -nct {threads} -knownSites {config[dbsnp]} -I {input} -o {output}"



rule bam_PrintRead:
    input:
        bam = "{filename}.bam",
        tbl = "{filename}.table"
    output:
        "{filename}.recal.bam"
    threads:
        128
    shell:
        "gatk -Xms20G -Xmx20G -T PrintReads -R {config[ref]} -nct {threads} -I {input.bam} --BQSR {input.tbl} -o {output}"



# TODO :
#  - Mark duplicate
#  - second pass to analyze covariation remaining after recalibration
#  - Generating before/after recalibration plot : https://software.broadinstitute.org/gatk/documentation/article?id=2801









rule fasta_dict_creation:
    input:
        "{reference}.fa"
    output:
        "{reference}.dict"
    shell:
        "picard CreateSequenceDictionary REFERENCE={input} OUTPUT={output}"








# ----------------------------------------------------
# Variant Calling
# ----------------------------------------------------


rule variant_calling_mpileup:
    input:
        bam = "{sample}.sorted.bam",
        bai = "{sample}.sorted.bam.bai"
    output:
        "{sample}.mpileup.vcf"
    log:
        "{sample}.mpileup.vcf.log"
    shell:
        "samtools mpileup -ugf {config[ref]} {input.bam} | bcftools call -vm -O v -o {output}  2> {log}"


rule variant_calling_HC:
    input:
        bam = "{sample}.realigned.recal.bam",
        bai = "{sample}.realigned.recal.bam.bai"
    output:
        "{sample}.hc.vcf"
    log:
        "{sample}.hc.vcf.log"
    threads:
        128
    shell:
        "gatk -Xms20G -Xmx20G -T HaplotypeCaller -R {config[ref]} -nct {threads} -I {input.bam} -o {output} -ERC GVCF --variant_index_type LINEAR --variant_index_parameter 128000  "



# rule vcf_index:
#     input:
#         "{sample}.vcf.gz"
#     output:
#         "{sample}.vcf.gz.tbi"
#     shell:
#         "tabix -p vcf {input}"









# ----------------------------------------------------
# Annotations
# ----------------------------------------------------


rule annotation_snpeff:
    input:
        "{sample}.vcf"
    output:
        "{sample}.snpeff.vcf"
    log:
        "{sample}.snpeff.log"
    shell:
        "snpEff -Xmx8g -v {config[snpEff_ref]} {input} > {output} "