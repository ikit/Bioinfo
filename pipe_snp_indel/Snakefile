configfile : "config.yml"
workdir: config["workdir"]






# ----------------------------------------------------
# Common
# ----------------------------------------------------


rule unzip:
    input:
        "{filename}.gz"
    output:
        "{filename}"
    shell:
        "gzip -d {input}"


# rule bgzip:
#     input:
#         "{filename}.vcf"
#     output:
#         "{filename}.vcf.gz"
#     shell:
#         "bgzip {input}"


rule fq_to_fastq:
    input:
        "{filename}.fq"
    output:
        "{filename}.fastq"
    shell:
        "mv {input} {output}"

# ----------------------------------------------------
# Alignment
# ----------------------------------------------------


rule qcreport:
    input: 
        "{filename}.fastq.gz"
    output:
        "html/{filename}_fastqc.html"
    log:
        "html/{filename}.report.log"
    shell:
        "mkdir -p html;"
        "fastqc {input} -o html 2>&1 > {log}"





rule alignment:
    input:
        fwd = "{sample}_R1.fastq",
        rev = "{sample}_R2.fastq"
    output:
        "{sample}.sam"
    threads:128 
    log:
        "{sample}.bwa.log"
    shell:
        "bwa mem -R '@RG\tID:bwa\tSM:{wildcards.sample}\tLB:library1' -t {threads} {config[ref]} {input.fwd} {input.rev} > {output}  2> {log}"



rule sorting_sam:
    input:
        "{sample}.sam"
    output:
        "{sample}.sorted.sam"
    threads:
        128
    log:
        "{sample}.sorted.log"
    shell:
        #"picard-tools SortSam INPUT={input} OUTPUT={output} SORT_ORDER=coordinate 2> {log}"
        "samtools sort {input} --threads {threads} -o {output}"


# rule mark_duplicate:
#   input:
#       "{sample}.sorted.sam"
#   output:
#       "{sample}.markDuplicate.sam",
#       "{sample}.markDuplicate.metrics"
#   log:
#       "{sample}.markDuplicate.log"
#   shell:
#       "picard-tools MarkDuplicatesWithMateCigar INPUT={input} OUTPUT={output[0]} M={output[1]} 2> {log}"


rule sam_to_bam:
    input:
        "{filename}.sam"
    output:
        bam = "{filename}.bam"
    shell:
        "samtools view  -Sbh {input} > {output.bam}"


rule index_bam:
    message: 
        "Create index for bam.\n"
        "   inputs  : {input}\n"
        "   outputs : {output}"
    input:
        "{filename}.bam"
    output:
        "{filename}.bam.bai"
    shell:
        "samtools index {input} {output}"



rule bam_RealignerTargetCreator:
    message: 
        "Emits intervals for the Local Indel Realigner to target for realignment.\n"
        "   inputs  : {input}\n"
        "   outputs : {output}"
    input:
        "{sample}.sorted.bam",
        "{sample}.sorted.bam.bai"
    output:
        "{sample}.indel.intervals"
    shell:
        "java -Xms30G -Xmx30G -jar /PROGS/EXTERN/GATK/GenomeAnalysisTK-3.3-0/GenomeAnalysisTK.jar -T RealignerTargetCreator -R  {config[ref]} -I {input[0]} -o {output}"



rule bam_IndelRealigner:
    message: 
        "Performs local realignment of reads to correct misalignments due to the presence of indels.\n"
        "   inputs  : {input}\n"
        "   outputs : {output}"
    input:
        bam = "{sample}.sorted.bam",
        bai = "{sample}.sorted.bam.bai",
        itv = "{sample}.indel.intervals"
    output:
        "{sample}.realigned.bam"
    shell:
        "java -Xms30G -Xmx30G -jar /PROGS/EXTERN/GATK/GenomeAnalysisTK-3.3-0/GenomeAnalysisTK.jar -T IndelRealigner -R  {config[ref]} -I {input.bam} -targetIntervals {input.itv} -o {output}"





# rule 
# picard-tools CreateSequenceDictionary REFERENCE=hg38.small.fa OUTPUT=hg38.small.dict




# ----------------------------------------------------
# Variant Calling
# ----------------------------------------------------


rule variant_calling:
    input:
        bam = "{sample}.sorted.bam",
        bai = "{sample}.sorted.bam.bai"
    output:
        "{sample}.vcf"
    log:
        "{sample}.vcf.log"
    shell:
        "samtools mpileup -ugf {config[ref]} {input.bam} | bcftools call -vm -O v -o {output}  2> {log}"


# rule vcf_index:
#     input:
#         "{sample}.vcf.gz"
#     output:
#         "{sample}.vcf.gz.tbi"
#     shell:
#         "tabix -p vcf {input}"









# ----------------------------------------------------
# Annotations
# ----------------------------------------------------


rule annotation_snpeff:
    input:
        "{sample}.vcf"
    output:
        "{sample}.snpeff.vcf"
    log:
        "{sample}.snpeff.log"
    shell:
        "snpEff -Xmx8g -v {config[snpEff_ref]} {input} > {output} "